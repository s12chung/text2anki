// Code generated by testdb.GenerateModelsCode(). DO NOT EDIT.
package testdb

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"path"
	"runtime"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/s12chung/text2anki/db/pkg/db"
	"github.com/s12chung/text2anki/pkg/util/test/fixture"
)

var callerPath string

func init() {
	_, callerFilePath, _, ok := runtime.Caller(0)
	if !ok {
		fmt.Println("runtime.Caller not ok for Seed()")
		os.Exit(-1)
	}
	callerPath = path.Dir(callerFilePath)
}

// SeedModels seeds the models for the testdb
func SeedModels() error {
	queries := db.Qs()
{{ range . }}
	{{ .Name | lower | pluralize }}, err := {{ .Name | pluralize }}()
	if err != nil {
		return err
	}
	for _, {{ .Name | lower }} := range {{ .Name | lower | pluralize }} {
		if _, err := {{ .CreateCode }}; err != nil {
			return err
		}
	}
{{ end }}
	return nil
}

{{- range . }}

// {{ .Name | pluralize }} seeds the {{ .Name | pluralize }}
func {{ .Name | pluralize }}() ([]db.{{ .Name }}, error) {
	var {{ .Name | lower | pluralize }} []db.{{ .Name }}
	if err := unmarshall("{{ .Name | pluralize }}Seed", &{{ .Name | lower | pluralize }}); err != nil {
		return nil, err
	}
	return {{ .Name | lower | pluralize }}, nil
}

// {{ .Name | pluralize }}T seeds the {{ .Name | pluralize }}
func {{ .Name | pluralize }}T(t *testing.T) []db.{{ .Name }} {
	require := require.New(t)
	{{ .Name | lower | pluralize }}, err := {{ .Name | pluralize }}()
	require.NoError(err)
	return {{ .Name | lower | pluralize }}
}
{{- end }}

func unmarshall(filename string, models any) error {
	bytes, err := os.ReadFile(path.Join(callerPath, fixture.TestDataDir, filename) + ".json")
	if err != nil {
		return err
	}
	return json.Unmarshal(bytes, models)
}
