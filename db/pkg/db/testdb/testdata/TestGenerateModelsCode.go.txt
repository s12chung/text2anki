// Code generated by testdb.GenerateModelsCode(). DO NOT EDIT.
package testdb

import (
	"context"
	"encoding/json"
	"os"
	"path"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/s12chung/text2anki/db/pkg/db"
	"github.com/s12chung/text2anki/pkg/util/test/fixture"
)

// SeedModels seeds the models for the testdb
func SeedModels() error {
	queries := db.Qs()

	terms, err := Terms()
	if err != nil {
		return err
	}
	for _, term := range terms {
		if _, err := queries.TermCreate(context.Background(), term.CreateParams()); err != nil {
			return err
		}
	}

	sourceSerializeds, err := SourceSerializeds()
	if err != nil {
		return err
	}
	for _, sourceSerialized := range sourceSerializeds {
		if _, err := queries.SourceCreate(context.Background(), sourceSerialized.ToSourceCreateParams()); err != nil {
			return err
		}
	}

	return nil
}

const termsSeedFilename = "TermsSeed.json"

// Terms seeds the Terms
func Terms() ([]db.Term, error) {
	var terms []db.Term
	if err := unmarshall(termsSeedFilename, &terms); err != nil {
		return nil, err
	}
	return terms, nil
}

// TermsT seeds the Terms
func TermsT(t *testing.T) []db.Term {
	require := require.New(t)
	terms, err := Terms()
	require.NoError(err)
	return terms
}

const sourceSerializedsSeedFilename = "SourceSerializedsSeed.json"

// SourceSerializeds seeds the SourceSerializeds
func SourceSerializeds() ([]db.SourceSerialized, error) {
	var sourceSerializeds []db.SourceSerialized
	if err := unmarshall(sourceSerializedsSeedFilename, &sourceSerializeds); err != nil {
		return nil, err
	}
	return sourceSerializeds, nil
}

// SourceSerializedsT seeds the SourceSerializeds
func SourceSerializedsT(t *testing.T) []db.SourceSerialized {
	require := require.New(t)
	sourceSerializeds, err := SourceSerializeds()
	require.NoError(err)
	return sourceSerializeds
}

func unmarshall(filename string, models any) error {
	bytes, err := os.ReadFile(path.Join(callerPath, fixture.TestDataDir, filename))
	if err != nil {
		return err
	}
	return json.Unmarshal(bytes, models)
}
