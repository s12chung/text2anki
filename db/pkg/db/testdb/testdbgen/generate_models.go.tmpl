// Code generated by testdb.GenerateModelsCode(). DO NOT EDIT.
//
// Package models contains the models used by testdb
package models

import (
	"encoding/json"
	"fmt"
	"os"
	"path"
	"runtime"

	"github.com/s12chung/text2anki/db/pkg/db"
)

var callerPath string

func init() {
	_, callerFilePath, _, ok := runtime.Caller(0)
	if !ok {
		fmt.Println("runtime.Caller not ok for Seed()")
		os.Exit(-1)
	}
	callerPath = path.Dir(callerFilePath)
}

var seedMap = map[string]func(tx db.Tx) error{
	{{- range . }}
	"{{ .Name | pluralize }}":{{ alignPad (.Name | pluralize) 18 }}Seed{{ .Name | pluralize }},
	{{- end }}
}

// SeedList seeds the models for the testdb
func SeedList(tx db.Tx, list map[string]bool) error {
	isWhiteList, isBlacklist := true, true
	for k, v := range list {
		if v {
			isBlacklist = false
		} else {
			isWhiteList = false
			continue
		}
		seedFunc, exists := seedMap[k]
		if !exists {
			return fmt.Errorf("seedFunc for '%v' doesn't exist", k)
		}
		if err := seedFunc(tx); err != nil {
			return err
		}
	}
	for k, seedFunc := range seedMap {
		if _, exists := list[k]; !(isBlacklist && isWhiteList) &&
			(isBlacklist && exists || isWhiteList && !exists) {
			continue
		}
		if err := seedFunc(tx); err != nil {
			return err
		}
	}
	return nil
}

{{- range . }}

// {{ .Name | pluralize }}SeedFilename is the filename of the testdb models
const {{ .Name | pluralize }}SeedFilename = "{{ .Name | pluralize }}Seed.json"

// {{ .Name | pluralize }} are testdb models for {{ .Name | pluralize }}
func {{ .Name | pluralize }}() ([]db.{{ .Name }}, error) {
	var {{ .Name | lower | pluralize }} []db.{{ .Name }}
	if err := unmarshall({{ .Name | pluralize }}SeedFilename, &{{ .Name | lower | pluralize }}); err != nil {
		return nil, err
	}
	return {{ .Name | lower | pluralize }}, nil
}

// {{ .Name | pluralize }}Must are testdb models for {{ .Name | pluralize }}, fails if there is an error
func {{ .Name | pluralize }}Must() []db.{{ .Name }} {
	{{ .Name | lower | pluralize }}, err := {{ .Name | pluralize }}()
	if err != nil {
		fmt.Println("{{ .Name | pluralize }}Must failed")
		os.Exit(-1)
	}
	return {{ .Name | lower | pluralize }}
}

// Seed{{ .Name | pluralize }} seeds the {{ .Name | pluralize }} testdb models
func Seed{{ .Name | pluralize }}(tx db.Tx) error {
	{{ .Name | lower | pluralize }}, err := {{ .Name | pluralize }}()
	if err != nil {
		return err
	}
	qs := db.New(tx)
	for _, {{ .Name | lower }} := range {{ .Name | lower | pluralize }} {
		if _, err := {{ .CreateCode }}; err != nil {
			return err
		}
	}
	return nil
}
{{- end }}

func unmarshall(filename string, models any) error {
	bytes, err := os.ReadFile(path.Join(callerPath, "modeldata", filename))
	if err != nil {
		return err
	}
	return json.Unmarshal(bytes, models)
}
