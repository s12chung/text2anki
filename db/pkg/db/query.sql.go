// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package db

import (
	"context"
)

const termCreate = `-- name: TermCreate :one
INSERT INTO terms (
  text, variants, part_of_speech, common_level, translations, popularity
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING text, variants, part_of_speech, common_level, translations, popularity
`

type TermCreateParams struct {
	Text         string
	Variants     string
	PartOfSpeech string
	CommonLevel  string
	Translations string
	Popularity   string
}

func (q *Queries) TermCreate(ctx context.Context, arg TermCreateParams) (Term, error) {
	row := q.db.QueryRowContext(ctx, termCreate,
		arg.Text,
		arg.Variants,
		arg.PartOfSpeech,
		arg.CommonLevel,
		arg.Translations,
		arg.Popularity,
	)
	var i Term
	err := row.Scan(
		&i.Text,
		&i.Variants,
		&i.PartOfSpeech,
		&i.CommonLevel,
		&i.Translations,
		&i.Popularity,
	)
	return i, err
}

const termsSearch = `-- name: TermsSearch :many
SELECT text, variants, part_of_speech, common_level, translations, popularity FROM terms WHERE text MATCH ?
`

func (q *Queries) TermsSearch(ctx context.Context, text string) ([]Term, error) {
	rows, err := q.db.QueryContext(ctx, termsSearch, text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Term
	for rows.Next() {
		var i Term
		if err := rows.Scan(
			&i.Text,
			&i.Variants,
			&i.PartOfSpeech,
			&i.CommonLevel,
			&i.Translations,
			&i.Popularity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
